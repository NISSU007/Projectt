import random
import pygame
import sys
from pygame.locals import *
pygame.init()

# ==============================
# ‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
# ==============================
SCREEN_W = 1500
SCREEN_H = 800
screen = pygame.display.set_mode((SCREEN_W, SCREEN_H))

# ==============================
# ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°
# ==============================
WHITE      = (255, 255, 255)
YELLOW     = (255, 255, 102)
GREY       = (211, 211, 211)
BLACK      = (0, 0, 0)
GREEN      = (0, 255, 0)
LIGHT_GREEN= (150, 255, 210)
RED        = (255, 0, 0)
MAIN_RED   = (158, 27, 20)
CREAM      = (243, 229, 171)

# ‡∏õ‡∏∏‡πà‡∏° Back
BACK = pygame.image.load("backarrow.png")
BACK = pygame.transform.scale(BACK, (80, 80))
BACK_rect = BACK.get_rect(center=(150, 100))

# ==============================
# ‡∏ü‡∏≠‡∏ô‡∏ï‡πå
# ==============================
font    = pygame.font.SysFont("Helvetica neue", 80)
fontinbox    = pygame.font.SysFont("Helvetica neue", 40)
bigFont = pygame.font.SysFont("Helvetica neue", 80)

# ==============================
# ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
# ==============================
youWin           = bigFont.render("You Win! Play again?",       True, LIGHT_GREEN)
youLose          = bigFont.render("You Lose! Try again?",      True, WHITE)
incorrectAnswer  = bigFont.render("Sum is incorrect", True, WHITE)

# ==============================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡πÇ‡∏´‡∏°‡∏î Hard)
# ==============================
# üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡πÇ‡∏´‡∏°‡∏î Hard)
def generate_equation_from_file(filename="Equation.txt"):
    '''‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡∏™‡∏°‡∏Å‡∏≤‡∏£'''
    try:
        with open(filename, "r", encoding="utf-8") as f:
            equations = [line.strip() for line in f if line.strip()]
        if not equations:
            raise ValueError("‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏Å‡∏≤‡∏£")
        return random.choice(equations)  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
    except FileNotFoundError:
        raise FileNotFoundError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {filename}, ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ")

# ==============================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
# ==============================
def generate_equation(level):
    '''‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å'''
    digits          = "0123456789"
    operators_easy  = "+-"
    operators_medium = "*/"

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö
    if level == "easy":
        length, n_ops, ops = 8, 1, operators_easy
    elif level == "medium":
        length, n_ops, ops = 10, 2, operators_medium
    else:
        raise ValueError("Level must be easy, medium, or hard")

    # ‡∏™‡∏∏‡πà‡∏°‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞ valid
    while True:
        # ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ "="
        eq_pos = random.randint(3, length - 3)
        eq = [""] * length
        eq[eq_pos] = "="

        # ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á operator
        possible_positions = [i for i in range(1, eq_pos)]
        op_positions = random.sample(possible_positions, n_ops)
        for pos in op_positions:
            eq[pos] = random.choice(ops)

        # ‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        for i in range(length):
            if eq[i] == "":
                eq[i] = random.choice(digits)

        # ‡πÅ‡∏¢‡∏Å‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏≠‡∏á "="
        left  = "".join(eq[:eq_pos])
        right = "".join(eq[eq_pos + 1:])

        try:
            left_val  = eval(left)
            right_val = eval(right)

            # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if left_val == right_val and right_val != 0:
                return "".join(eq)
        except Exception:
            continue

# ==============================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
# ==============================
def checkGuess(turns, nerdleSum, userGuess, window):
    '''‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå'''
    spacing = 0
    guessColourCode = [GREY] * len(nerdleSum)

    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô
    for i, ch in enumerate(userGuess):
        if ch in nerdleSum:
            guessColourCode[i] = YELLOW
        if nerdleSum[i] == ch:
            guessColourCode[i] = GREEN

    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
    for i, ch in enumerate(userGuess):
        text = fontinbox.render(ch, True, BLACK)
        pygame.draw.rect(window, guessColourCode[i],
                         pygame.Rect(SCREEN_W//2 - 325 + spacing, 50 + (turns*80), 50, 50))
        window.blit(text, (SCREEN_W//2 - 310 + spacing, 60 + (turns*80)))
        spacing += 80

    # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‚Üí ‡∏ä‡∏ô‡∏∞
    return all(c == GREEN for c in guessColourCode)

# ==============================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°
# ==============================
def start_game(level):
    '''‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°'''
    while True:  # loop ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö restart ‡πÄ‡∏Å‡∏°
        if level == "hard":
            nerdleSum = generate_equation_from_file("Equation.txt") # ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ó‡∏ô
        else:
            nerdleSum = generate_equation(level) # easy / medium
        grid_size = len(nerdleSum)

        print("Tatget:", nerdleSum) # debug ‡∏î‡∏π‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        FPS = 60 
        clock = pygame.time.Clock()
        screen.fill(MAIN_RED)

        # ‡∏ß‡∏≤‡∏î grid
        for x in range(grid_size):
            for y in range(6):
                pygame.draw.rect(screen, GREY,
                pygame.Rect(((x*80)+(SCREEN_W//2 - 325)), (y*80)+50, 50, 50), 2)

        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏Å‡∏°
        guess = ""
        turns = 0
        win   = False
        playing = True
        showincorrect = False

        # loop ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°
        while playing:
            for event in pygame.event.get():
                if event.type == QUIT:  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°
                    pygame.quit()
                    sys.exit()

                if event.type == pygame.MOUSEBUTTONDOWN:
                    if BACK_rect.collidepoint(event.pos):
                        import interface as SY
                        SY.window_2()


                if event.type == pygame.KEYDOWN:
                    if event.key == K_BACKSPACE:  # ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                        guess = guess[:-1]

                    elif event.key == K_RETURN:  # ‡∏Å‡∏î Enter
                        if win or turns == 6:
                            playing = False  # ‡∏≠‡∏≠‡∏Å loop ‚Üí restart

                        elif len(guess) == grid_size and "=" in guess:
                            try:
                                # split ‡πÅ‡∏•‡∏∞ eval ‡∏™‡∏°‡∏Å‡∏≤‡∏£
                                userGuess = guess.split("=") #‡∏ñ‡∏π‡∏Å
                                if eval(userGuess[0]) == float(userGuess[1]):
                                    win = checkGuess(turns, nerdleSum, guess, screen)
                                    turns += 1
                                    guess = ""
                                    showincorrect = False
                                    screen.fill(MAIN_RED, (0, 700, 2000, 500))
                                else: # ‡∏ú‡∏¥‡∏î
                                    guess = ""
                                    showincorrect = True
                            except Exception: # ‡∏ú‡∏¥‡∏î
                                showincorrect = True
                                guess = ""
                    else:  # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                        if event.unicode.isprintable() and len(guess) < grid_size:
                            guess += event.unicode.upper()
                            showincorrect = False

            # ‡πÅ‡∏™‡∏î‡∏á guess ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
            pygame.draw.rect(screen, CREAM, ((x*40), (y*110), 900, 150))
            renderGuess = font.render(guess, True, BLACK)
            screen.blit(renderGuess, (600, 600))


            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            screen.fill(MAIN_RED, (70, 700, 1000, 100))
            if showincorrect:
                screen.blit(incorrectAnswer, (500, 715))

            # üèÜ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡∏ô‡∏∞/‡πÅ‡∏û‡πâ
            if win:
                screen.blit(youWin, (500, 715))

            if turns == 6 and not win:
                screen.blit(youLose, (500, 715))
            # ‡∏ß‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏° Back
            screen.blit(BACK, BACK_rect)
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≠
            pygame.display.update()
            clock.tick(FPS)
